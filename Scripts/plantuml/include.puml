@startuml
class Enemy {
    - <<const>> EnemyTag : string = "Enemy"
    - <<const>> PlayerTag : string = "Player"
    - <<const>> DamageInterval : float = 1.0f
    - _damageTimer : float
    + IsTouchingPlayer : bool <<get>>
    + {static} Init(prefab:GameObject, enemyScriptableObject:EnemyScriptableObject, spawnPositionInScreen:Vector3, spawnPositionInWorld:Vector3, container:DiContainer) : Enemy
    + GetSelf() : IEnemy
    - Start() : void
    - Update() : void
    - FixedUpdate() : void
    - Initialize() : void
    - FindPlayer() : void
    - CauseDamage() : void
    - OnTriggerEnter(other:Collider) : void
    - OnTriggerExit(other:Collider) : void
    + SetIsTouchingPlayer(isTouchingPlayer:bool) : void
    + DestroySelf() : void
    - {static} CreateEnemyEventManager() : EventManager
}
class "List`1"<T> {
}
MonoBehaviour <|-- Enemy
IEnemy <|-- Enemy
Enemy --> "_globalEnemyEventManager" GlobalEnemyEventManager
Enemy --> "Position" Vector3
Enemy --> "MainCamera" Camera
Enemy --> "EnemyScriptableObject" EnemyScriptableObject
Enemy --> "PlayerInstance" GameObject
Enemy --> "EventManager" EventManager
Enemy --> "Context" StateContext
Enemy --> "Rigidbody" Rigidbody
Enemy o-> "CloseEnemies<GameObject>" "List`1"
Enemy --> "SpawnPositionInScreen" Vector3
Enemy --> "SpawnPositionInWorld" Vector3
Enemy --> "HitPoint" HitPoint
Enemy --> "AttackParameter" AttackParameter
Enemy --> "Description" Description
Enemy --> "MovementParameter" MovementParameter
interface IEnemy {
    IsTouchingPlayer : bool <<get>>
    SetIsTouchingPlayer(isTouchingPlayer:bool) : void
    DestroySelf() : void
}
class "List`1"<T> {
}
IEnemy --> "MainCamera" Camera
IEnemy --> "Position" Vector3
IEnemy --> "Rigidbody" Rigidbody
IEnemy --> "CloseEnemies<GameObject>" "List`1"
IEnemy --> "HitPoint" HitPoint
IEnemy --> "MovementParameter" MovementParameter
IEnemy --> "SpawnPositionInScreen" Vector3
IEnemy --> "SpawnPositionInWorld" Vector3
IEnemy --> "PlayerInstance" GameObject
IEnemy --> "EventManager" EventManager
class AttackParameter {
    + AttackPower : int <<get>>
    + AttackParameter(attackPower:int)
}
class Description {
    + Name : string <<get>>
    + DescriptionText : string <<get>>
    + Evaluation : int <<get>>
    + Description(name:string, descriptionText:string, evaluation:int)
}
class HitPoint {
    + MaxHitPoint : int <<get>>
    + CurrentHitPoint : int <<get>>
    + IsDead : bool <<get>>
    + HitPoint(maxHitPoint:int)
    + RecoverDamage(recoverPoint:int) : void
    + ReceiveDamage(damage:int) : void
}
class "Subject`1"<T> {
}
class "IObservable`1"<T> {
}
IReceiveDamage <|-- HitPoint
HitPoint o-> "_onDamageReceived<int>" "Subject`1"
HitPoint --> "OnDamageReceived<int>" "IObservable`1"
class MovementParameter {
    + MovingSpeed : float <<get>>
    + ChasingAccuracy : float <<get>>
    + MovementParameter(enemyScriptableObject:EnemyScriptableObject, targetPosition:Vector3, currentPosition:Vector3)
    + SetTargetPosition(targetPosition:Vector3) : void
    + SetCurrentPosition(currentPosition:Vector3) : void
    + SetCurrentVelocity(currentVelocity:Vector3) : void
}
MovementParameter --> "TargetPosition" Vector3
MovementParameter --> "CurrentPosition" Vector3
MovementParameter --> "CurrentVelocity" Vector3
class EnemyScriptableObject {
    - enemyName : string
    + EnemyName : string <<get>>
    - description : string
    + Description : string <<get>>
    - evaluation : int
    + Evaluation : int <<get>>
    - maxHitPoint : int
    + MaxHitPoint : int <<get>>
    - attackPower : int
    + AttackPower : int <<get>>
    - movingSpeed : int
    + MovingSpeed : int <<get>>
    - chasingAccuracy : float
    + ChasingAccuracy : float <<get>>
    + CheckStateTransitions() : State.IState.State
    + InitializeController(enemy:IEnemy) : State.IState.State
}
EnemyScriptableObject --> "enemyPrefab" GameObject
EnemyScriptableObject --> "EnemyPrefab" GameObject
EnemyScriptableObject --> "controller" IController
class StageScriptableObject {
    - maxEvaluationValue : int
    + MaxEvaluationValue : int <<get>>
    - periodTime : float
    + PeriodTime : float <<get>>
}
class WaveScriptableObject {
    - enemyNumberInGroup : int
    + EnemyNumberInGroup : int <<get>>
    - groupNumber : int
    + GroupNumber : int <<get>>
    - minElementNumberInGroup : int
    + MinElementNumberInGroup : int <<get>>
    + HasStrongEnemy : bool <<get>> <<set>>
    + {static} SetFormationEvaluation(formationType:FormationType) : int
    + SetStrongEnemyEvaluation() : int
}
enum FormationType {
    OneDirection,
    OneDirectionTwoLines,
    TwoDirection,
    ThreeDirection,
    EveryDirection,
}
WaveScriptableObject --> "enemyScriptableObject" EnemyScriptableObject
WaveScriptableObject --> "EnemyScriptableObject" EnemyScriptableObject
WaveScriptableObject --> "strongEnemyScriptableObject" EnemyScriptableObject
WaveScriptableObject --> "StrongEnemyScriptableObject" EnemyScriptableObject
WaveScriptableObject --> "formationType" FormationType
WaveScriptableObject --> "FormationType" FormationType
class StateContext {
    + StateContext()
    + AddState(state:IState.State, stateClass:IState.IState) : void
    + ChangeState(next:IState.State) : void
    + Update() : void
    + FixedUpdate() : void
}
class "Dictionary`2"<T1,T2> {
}
StateContext --> "_stateTable<IState.State,IState.IState>" "Dictionary`2"
class BlinkEnemy {
    - _isTweening : bool
    - <<const>> BlinkTime : float = 0.05f
    - Start() : void
    - {static} BrightenColor(originalColor:Color) : Color
    - SetUniRx() : void
}
MonoBehaviour <|-- BlinkEnemy
BlinkEnemy --> "enemy" Enemy
class EnemySpawner {
    - _isPeriodEnd : bool
    + StageLevel : int <<get>>
    - Awake() : void
    - Start() : void
    - FixedUpdate() : void
    + IncreaseStageLevel() : void
    - <<async>> SpawnEnemyInPeriod(cancellationToken:CancellationToken, stageScriptableObject:StageScriptableObject) : UniTaskVoid
    + CancelSpawnEnemyInPeriod() : void
    - {static} SetWaveScriptableObjectsInPeriod(stageScriptableObject:StageScriptableObject) : List<WaveScriptableObject>
    - SpawnEnemy(waveScriptableObject:WaveScriptableObject) : void
    - GetSpawnPositionInScreen(enemyNumberInGroup:int, groupNumber:int, minElementNumber:int, directionNumber:int, isTwoLines:bool) : List<Vector3>
}
class "Subject`1"<T> {
}
class "IObservable`1"<T> {
}
MonoBehaviour <|-- EnemySpawner
EnemySpawner --> "_container" DiContainer
EnemySpawner --> "_getSpawnPoints" GetSpawnPoints
EnemySpawner --> "_rayCasterFromScreen" RayCasterFromScreen
EnemySpawner --> "_cts" CancellationTokenSource
EnemySpawner o-> "_onPeriodEnd<Unit>" "Subject`1"
EnemySpawner --> "OnPeriodEnd<Unit>" "IObservable`1"
class EventManager {
}
class "Subject`1"<T> {
}
EventManager o-> "OnDamageReceived<int>" "Subject`1"
EventManager o-> "OnDeath<Unit>" "Subject`1"
class GetSpawnPoints {
    - <<const>> HorizontalSpawnPointNumber : int = 32
    - <<const>> VerticalSpawnPointNumber : int = 18
    - <<const>> NumberOfEnemySpawnLine : int = 2
    - _horizontalDistanceBetweenSpawnPoint : float
    - _verticalDistanceBetweenSpawnPoint : float
    - Awake() : void
    - InitializeSpawnPoint() : void
    - CalculateSpawnPosition(spawnPointArray:IReadOnlyList<Vector3[]>, isHorizontal:bool, isLineIncreasingDirectionPositive:bool) : void
    + GetTopSpawnPointInScreen() : Vector3[][]
    + GetBottomSpawnPointInScreen() : Vector3[][]
    + GetLeftSpawnPointInScreen() : Vector3[][]
    + GetRightSpawnPointInScreen() : Vector3[][]
}
MonoBehaviour <|-- GetSpawnPoints
interface IGetSeparationVector {
    + GetSeparationVector() : Vector3
}
interface IIsOutOfScreen {
    + IsOutOfScreen() : bool
}
interface IState {
    Entry() : void
    Update() : void
    FixedUpdate() : void
    Exit() : void
}
enum State {
    Idle,
    Chase,
    GoStraight,
}
IState --> "State" State
abstract class BaseController {
    + SetInitialState(enemy:IEnemy) : IState.State
    + {abstract} CheckTransitions() : IState.State
    - AddCommonStates() : void
    # {abstract} AddUniqueStates() : void
    # {abstract} SetInitialState() : IState.State
}
IController <|-- BaseController
BaseController --> "Enemy" IEnemy
BaseController --> "StateContext" StateContext
class ChaserController {
    + <<override>> CheckTransitions() : IState.State
    # <<override>> AddUniqueStates() : void
    # <<override>> SetInitialState() : IState.State
}
BaseController <|-- ChaserController
interface IController {
    SetInitialState(enemy:IEnemy) : IState.State
    CheckTransitions() : IState.State
}
class StraightLinerController {
    + <<override>> CheckTransitions() : IState.State
    # <<override>> AddUniqueStates() : void
    # <<override>> SetInitialState() : IState.State
}
BaseController <|-- StraightLinerController
abstract class BaseState {
    # BaseState(enemy:IEnemy)
    + Entry() : void
    # {abstract} OnEntry() : void
    + Update() : void
    # {abstract} OnUpdate() : void
    + FixedUpdate() : void
    # {abstract} OnFixedUpdate() : void
    + Exit() : void
    # {abstract} OnExit() : void
    - Dead() : void
    # Disappear() : void
}
class "List`1"<T> {
}
IState <|-- BaseState
BaseState --> "enemy" IEnemy
BaseState --> "MainCamera" Camera
BaseState --> "EventManager" EventManager
BaseState --> "Rigidbody" Rigidbody
BaseState --> "CloseEnemies<GameObject>" "List`1"
BaseState --> "HitPoint" HitPoint
BaseState --> "MovementParameter" MovementParameter
BaseState --> "PlayerInstance" GameObject
BaseState --> "SpawnPositionInScreen" Vector3
BaseState --> "SpawnPositionInWorld" Vector3
BaseState --> "State" State
class ChaseState {
    + ChaseState(enemy:IEnemy)
    # <<override>> OnEntry() : void
    # <<override>> OnUpdate() : void
    # <<override>> OnFixedUpdate() : void
    # <<override>> OnExit() : void
    + GetSeparationVector() : Vector3
}
BaseState <|-- ChaseState
IGetSeparationVector <|-- ChaseState
ChaseState --> "State" State
class GoStraightState {
    + GoStraightState(enemy:IEnemy)
    - _disappearTimer : float
    # <<override>> OnEntry() : void
    # <<override>> OnUpdate() : void
    # <<override>> OnFixedUpdate() : void
    # <<override>> OnExit() : void
    - GetTargetPositionInScreen(spawnPositionInViewport:Vector3) : Vector3
    + IsOutOfScreen() : bool
}
BaseState <|-- GoStraightState
IIsOutOfScreen <|-- GoStraightState
GoStraightState --> "State" State
GoStraightState --> "rayCasterFromScreen" RayCasterFromScreen
class IdleState {
    + IdleState(enemy:IEnemy)
    # <<override>> OnEntry() : void
    # <<override>> OnUpdate() : void
    # <<override>> OnFixedUpdate() : void
    # <<override>> OnExit() : void
}
BaseState <|-- IdleState
IdleState --> "State" State
@enduml
